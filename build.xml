<?xml version="1.0" encoding="UTF-8"?>
<project name="podcast-manager" default="dev_head" basedir=".">
	<!-- Project properties -->
	<property name="repo.dir" value="." />
	<property name="version" value="3.0.0-dev" />
	<tstamp>
		<format property="build.date" pattern="yyyy-MM-dd" />
	</tstamp>

	<macrodef name="git">
		<attribute name="command" />
		<attribute name="dir" default="" />
		<element name="args" optional="true" />
		<sequential>
			<exec executable="git" dir="@{dir}">
				<arg value="@{command}" />
				<args/>
			</exec>
		</sequential>
	</macrodef>

	<!-- Build a package for testing -->
	<target name="dev_head" description="Builds test packages based on the development head" depends="rebuild-packages,copy-files,zip-packages">
		<echo message="Deleting old master builds" />
		<delete includeemptydirs="true">
			<fileset dir=".">
				<include name="pkg_podcastmanager_${version}.zip" />
			</fileset>
		</delete>
		<echo message="Build Podcast Manager package" />
		<zip destfile="pkg_podcastmanager_${version}.zip">
			<fileset dir="packaging">
				<include name="language/**" />
				<include name="packages/**" />
				<include name="pkg_podcastmanager.xml" />
				<include name="script.php" />
			</fileset>
		</zip>
	</target>

	<!-- Build a package for release -->
	<target name="release" description="Builds release packages based on the development head" depends="rebuild-packages,copy-files,zip-packages">
		<echo message="Build Podcast Manager package" />
		<mkdir dir="releases" />
		<zip destfile="releases/pkg_podcastmanager_${version}.zip">
			<fileset dir="packaging">
				<include name="language/**" />
				<include name="packages/**" />
				<include name="pkg_podcastmanager.xml" />
				<include name="script.php" />
			</fileset>
		</zip>
		<echo message="Committing version" />
		<git command="commit">
			<args>
				<arg value="-am 'Prepare ${version} release'" />
			</args>
		</git>
		<echo message="Creating Git tag" />
		<git command="tag">
			<args>
				<arg value="${version}" />
			</args>
		</git>
		<echo message="Pushing Version commit and tag to GitHub" />
		<git command="push">
		</git>
		<git command="push">
			<args>
				<arg value="--tags" />
			</args>
		</git>
	</target>

	<!-- Copy files to staging to allow for manipulation pre-package -->
	<target name="copy-files" description="Stages the common files" depends="rebuild-packages">
		<echo message="Staging files for packaging" />

		<echo message="Create com_podcastmanager package" />
			<mkdir dir="packaging/staging" />
			<copy todir="packaging/staging/com_podcastmanager">
				<fileset dir="com_podcastmanager" />
			</copy>
			<replace file="packaging/staging/com_podcastmanager/podcastmanager.xml" token="##DATE##" value="${build.date}" />
			<replace file="packaging/staging/com_podcastmanager/podcastmanager.xml" token="##VERSION##" value="${version}" />

		<echo message="Create com_podcastmedia package" />
			<mkdir dir="packaging/staging" />
			<copy todir="packaging/staging/com_podcastmedia">
				<fileset dir="com_podcastmedia" />
			</copy>
			<replace file="packaging/staging/com_podcastmedia/podcastmedia.xml" token="##DATE##" value="${build.date}" />
			<replace file="packaging/staging/com_podcastmedia/podcastmedia.xml" token="##VERSION##" value="${version}" />

		<echo message="Create lib_getid3 package" />
			<mkdir dir="packaging/staging" />
			<copy todir="packaging/staging/lib_getid3">
				<fileset dir="lib_getid3" />
			</copy>

		<echo message="Create mod_podcastmanager package" />
			<mkdir dir="packaging/staging" />
			<copy todir="packaging/staging/mod_podcastmanager">
				<fileset dir="mod_podcastmanager" />
			</copy>
			<replace file="packaging/staging/mod_podcastmanager/mod_podcastmanager.xml" token="##DATE##" value="${build.date}" />
			<replace file="packaging/staging/mod_podcastmanager/mod_podcastmanager.xml" token="##VERSION##" value="${version}" />

		<echo message="Create mod_podcastmanagerfeed package" />
			<mkdir dir="packaging/staging" />
			<copy todir="packaging/staging/mod_podcastmanagerfeed">
				<fileset dir="mod_podcastmanagerfeed" />
			</copy>
			<replace file="packaging/staging/mod_podcastmanagerfeed/mod_podcastmanagerfeed.xml" token="##DATE##" value="${build.date}" />
			<replace file="packaging/staging/mod_podcastmanagerfeed/mod_podcastmanagerfeed.xml" token="##VERSION##" value="${version}" />

		<echo message="Create plg_content_podcastmanager package" />
			<mkdir dir="packaging/staging" />
			<copy todir="packaging/staging/plg_content_podcastmanager">
				<fileset dir="plg_content_podcastmanager" />
			</copy>
			<replace file="packaging/staging/plg_content_podcastmanager/podcastmanager.xml" token="##DATE##" value="${build.date}" />
			<replace file="packaging/staging/plg_content_podcastmanager/podcastmanager.xml" token="##VERSION##" value="${version}" />

		<echo message="Create plg_editors-xtd_podcastmanager package" />
			<mkdir dir="packaging/staging" />
			<copy todir="packaging/staging/plg_editors-xtd_podcastmanager">
				<fileset dir="plg_editors-xtd_podcastmanager" />
			</copy>
			<replace file="packaging/staging/plg_editors-xtd_podcastmanager/podcastmanager.xml" token="##DATE##" value="${build.date}" />
			<replace file="packaging/staging/plg_editors-xtd_podcastmanager/podcastmanager.xml" token="##VERSION##" value="${version}" />

		<echo message="Create plg_finder_podcastmanager_feeds package" />
			<mkdir dir="packaging/staging" />
			<copy todir="packaging/staging/plg_finder_podcastmanager_feeds">
				<fileset dir="plg_finder_podcastmanager_feeds" />
			</copy>
			<replace file="packaging/staging/plg_finder_podcastmanager_feeds/podcastmanager_feeds.xml" token="##DATE##" value="${build.date}" />
			<replace file="packaging/staging/plg_finder_podcastmanager_feeds/podcastmanager_feeds.xml" token="##VERSION##" value="${version}" />

		<echo message="Create plg_finder_podcastmanager_podcasts package" />
			<mkdir dir="packaging/staging" />
			<copy todir="packaging/staging/plg_finder_podcastmanager_podcasts">
				<fileset dir="plg_finder_podcastmanager_podcasts" />
			</copy>
			<replace file="packaging/staging/plg_finder_podcastmanager_podcasts/podcastmanager_podcasts.xml" token="##DATE##" value="${build.date}" />
			<replace file="packaging/staging/plg_finder_podcastmanager_podcasts/podcastmanager_podcasts.xml" token="##VERSION##" value="${version}" />

		<echo message="Create plg_podcastmedia_user package" />
			<mkdir dir="packaging/staging" />
			<copy todir="packaging/staging/plg_podcastmedia_user">
				<fileset dir="plg_podcastmedia_user" />
			</copy>
		<replace file="packaging/staging/plg_podcastmedia_user/user.xml" token="##DATE##" value="${build.date}" />
		<replace file="packaging/staging/plg_podcastmedia_user/user.xml" token="##VERSION##" value="${version}" />

		<echo message="Copy package manifest" />
			<copy file="pkg_podcastmanager.xml" tofile="packaging/pkg_podcastmanager.xml" overwrite="true" />
			<replace file="packaging/pkg_podcastmanager.xml" token="##DATE##" value="${build.date}" />
			<replace file="packaging/pkg_podcastmanager.xml" token="##VERSION##" value="${version}" />

		<echo message="Copy package scriptfile" />
		<copy file="script.php" tofile="packaging/script.php" overwrite="true" />

		<echo message="Copy package language" />
			<copy todir="packaging/language">
				<fileset dir="language" />
			</copy>
	</target>

	<!-- ZIP the separate extension packages -->
	<target name="zip-packages" description="Creates ZIP archives for installation" depends="rebuild-packages,copy-files">
		<echo message="Archiving packages" />
		<mkdir dir="packaging/packages" />
		<zip destfile="packaging/packages/com_podcastmanager.zip" basedir="packaging/staging/com_podcastmanager" />
		<zip destfile="packaging/packages/com_podcastmedia.zip" basedir="packaging/staging/com_podcastmedia" />
		<zip destfile="packaging/packages/lib_getid3.zip" basedir="packaging/staging/lib_getid3" />
		<zip destfile="packaging/packages/mod_podcastmanager.zip" basedir="packaging/staging/mod_podcastmanager" />
		<zip destfile="packaging/packages/mod_podcastmanagerfeed.zip" basedir="packaging/staging/mod_podcastmanagerfeed" />
		<zip destfile="packaging/packages/plg_content_podcastmanager.zip" basedir="packaging/staging/plg_content_podcastmanager" />
		<zip destfile="packaging/packages/plg_editors-xtd_podcastmanager.zip" basedir="packaging/staging/plg_editors-xtd_podcastmanager" />
		<zip destfile="packaging/packages/plg_finder_podcastmanager_feeds.zip" basedir="packaging/staging/plg_finder_podcastmanager_feeds" />
		<zip destfile="packaging/packages/plg_finder_podcastmanager_podcasts.zip" basedir="packaging/staging/plg_finder_podcastmanager_podcasts" />
		<zip destfile="packaging/packages/plg_podcastmedia_user.zip" basedir="packaging/staging/plg_podcastmedia_user" />
	</target>

	<!-- Rebuild the staging area -->
	<target name="rebuild-packages" description="Delete old packages">
		<echo message="Deleting packaging directory" />
		<delete dir="${repo.dir}/packaging" includeemptydirs="true" failonerror="true" />
		<echo message="Creating packaging directory" />
		<mkdir dir="packaging" />
	</target>

	<!-- Check code style based on Joomla Coding Standard -->
	<target name="phpcs" description="Generate codestyle report using PHP_CodeSniffer">
		<echo message="Remove previous codestyle report" />
		<delete quiet="yes" includeemptydirs="true">
			<fileset dir=".">
				<include name="build/logs/checkstyle.xml" />
			</fileset>
		</delete>
		<echo message="Running phpcs with Joomla! Coding Standard" />
		<exec executable="phpcs">
			<arg value="--report=checkstyle" />
			<arg value="--extensions=php" />
			<arg value="-p" />
			<arg value="--report-file=${repo.dir}/build/logs/checkstyle.xml" />
			<arg value="--standard=${repo.dir}/build/phpcs/Joomla" />
			<arg value="--ignore=${repo.dir}/com_podcastmanager/admin/liveupdate,${repo.dir}/com_podcastmanager/admin/media/js,${repo.dir}/com_podcastmanager/site/media,${repo.dir}/lib_getid3,${repo.dir}/plg_content_podcastmanager/mediaelements,${repo.dir}/packaging,${repo.dir}/releases,*/tmpl/*,${repo.dir}/files_podcastmanager_*,${repo.dir}/build/*" />
			<arg path="${repo.dir}" />
		</exec>
	</target>
</project>
